# Generated by Django 3.0.6 on 2020-05-26 18:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import projectfeed_app.models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_business', models.BooleanField(default=False, verbose_name='owner')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True, verbose_name='category_name')),
            ],
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='favorite_places', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Features',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offered', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('feat_rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)], verbose_name='feature_rating')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, validators=[django.core.validators.RegexValidator(flags=re.RegexFlag['IGNORECASE'], message='Email Address must be entered for verification', regex='^[a-z0-9\\._]+@\\w+\\.\\w{2,3}$')], verbose_name='location_email')),
                ('name', models.CharField(max_length=100, verbose_name='location_name')),
                ('address', models.CharField(max_length=50, verbose_name='location_address')),
                ('city', models.CharField(max_length=50, verbose_name='location_city')),
                ('zipcode', models.CharField(max_length=10, verbose_name='location_zip')),
                ('website', models.URLField(blank=True, verbose_name='location_website')),
                ('phone', models.CharField(max_length=10, verbose_name='location_phone')),
                ('biz_open', models.TimeField(max_length=50, verbose_name='location_open')),
                ('biz_close', models.TimeField(max_length=50, verbose_name='location_close')),
                ('res_join', models.DateTimeField(auto_now_add=True, verbose_name='date_res_join')),
                ('res_mod', models.DateTimeField(auto_now=True, verbose_name='date_res_mod')),
                ('res_image', models.ImageField(blank=True, upload_to='', verbose_name='restaurant_image')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)], verbose_name='main_rating')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=30, verbose_name='profile')),
                ('email', models.EmailField(blank=True, max_length=254, validators=[django.core.validators.RegexValidator(flags=re.RegexFlag['IGNORECASE'], message='Email Address must be entered for verification', regex='^[a-z0-9\\._]+@\\w+\\.\\w{2,3}$')], verbose_name='user_email')),
                ('registration', models.CharField(default=projectfeed_app.models.code_registration, max_length=15, verbose_name='registration_code')),
                ('links', models.URLField(blank=True, verbose_name='shared_links')),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('favorites', models.ManyToManyField(default='No Favorites Yet!', to='projectfeed_app.Favorites', verbose_name='user_favorites')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LocationFeatures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)], verbose_name='feature_rating')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projectfeed_app.Features')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projectfeed_app.Location')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='features',
            field=models.ManyToManyField(through='projectfeed_app.LocationFeatures', to='projectfeed_app.Features'),
        ),
        migrations.AddField(
            model_name='location',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='review_comment')),
                ('com_create', models.DateTimeField(auto_now_add=True, verbose_name='date_comment_created')),
                ('com_mod', models.DateTimeField(auto_now=True, verbose_name='date_comment_modified')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_comments', to='projectfeed_app.Reviews')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
